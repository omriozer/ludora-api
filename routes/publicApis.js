// routes/publicApis.js
// Backend proxy for public APIs to avoid CORS issues

import express from 'express';
import https from 'https';
const router = express.Router();

/**
 * Get Israeli cities from data.gov.il
 * Proxy endpoint to avoid CORS issues in frontend
 */
router.get('/israeli-cities', async (req, res) => {
  try {
    console.log('üèõÔ∏è PublicAPI: Fetching Israeli cities from data.gov.il via backend proxy');

    const options = {
      hostname: 'data.gov.il',
      path: '/api/action/datastore_search?resource_id=b7cf8f14-64a2-4b33-8d4b-edb286fdbd37&limit=1500',
      method: 'GET',
      headers: {
        'User-Agent': 'Ludora-API/1.0'
      }
    };

    const data = await new Promise((resolve, reject) => {
      const req = https.request(options, (response) => {
        let data = '';

        response.on('data', (chunk) => {
          data += chunk;
        });

        response.on('end', () => {
          try {
            const jsonData = JSON.parse(data);
            resolve(jsonData);
          } catch (error) {
            reject(new Error('Invalid JSON response'));
          }
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      req.setTimeout(10000, () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });

      req.end();
    });

    if (!data.success || !data.result || !data.result.records) {
      throw new Error('Invalid response format from data.gov.il');
    }

    // Extract city names and remove duplicates
    const cities = data.result.records
      .map(record => record.◊©◊ù_◊ô◊©◊ï◊ë || record.city_name || record.name)
      .filter(city => city && typeof city === 'string')
      .map(city => city.trim())
      .filter(city => city.length > 0)
      // Remove duplicates and sort alphabetically
      .reduce((unique, city) => {
        if (!unique.includes(city)) {
          unique.push(city);
        }
        return unique;
      }, [])
      .sort((a, b) => a.localeCompare(b, 'he'));

    console.log(`‚úÖ PublicAPI: Successfully fetched ${cities.length} Israeli cities`);

    res.json({
      success: true,
      cities: cities,
      count: cities.length,
      source: 'data.gov.il',
      cached: false
    });

  } catch (error) {
    console.error('‚ùå PublicAPI: Error fetching Israeli cities:', error);

    // Return fallback list of major Israeli cities
    const fallbackCities = [
      '◊ô◊®◊ï◊©◊ú◊ô◊ù', '◊™◊ú ◊ê◊ë◊ô◊ë-◊ô◊§◊ï', '◊ó◊ô◊§◊î', '◊®◊ê◊©◊ï◊ü ◊ú◊¶◊ô◊ï◊ü', '◊ê◊©◊ì◊ï◊ì', '◊§◊™◊ó ◊™◊ß◊ï◊ï◊î',
      '◊ë◊ê◊® ◊©◊ë◊¢', '◊†◊™◊†◊ô◊î', '◊ó◊ï◊ú◊ï◊ü', '◊ë◊†◊ô ◊ë◊®◊ß', '◊®◊û◊™ ◊í◊ü', '◊ê◊©◊ß◊ú◊ï◊ü',
      '◊®◊ó◊ï◊ë◊ï◊™', '◊ë◊™ ◊ô◊ù', '◊î◊®◊¶◊ú◊ô◊î', '◊õ◊§◊® ◊°◊ë◊ê', '◊û◊ï◊ì◊ô◊¢◊ô◊ü-◊û◊õ◊ë◊ô◊ù-◊®◊¢◊ï◊™',
      '◊†◊¶◊®◊™', '◊®◊¢◊†◊†◊î', '◊†◊î◊®◊ô◊î', '◊ú◊ï◊ì', '◊®◊û◊ú◊î', '◊¶◊§◊™', '◊¢◊õ◊ï',
      '◊ß◊®◊ô◊ô◊™ ◊í◊™', '◊ß◊®◊ô◊ô◊™ ◊û◊ï◊¶◊ß◊ô◊ü', '◊ò◊ë◊®◊ô◊î', '◊¢◊§◊ï◊ú◊î', '◊ê◊ô◊ú◊™', '◊ò◊ô◊®◊™ ◊õ◊®◊û◊ú',
      '◊í◊ë◊¢◊™◊ô◊ô◊ù', '◊ß◊®◊ô◊ô◊™ ◊ê◊™◊ê', '◊û◊¢◊ú◊î ◊ê◊ì◊ï◊û◊ô◊ù', '◊ê◊ú◊¢◊ì', '◊ß◊®◊ô◊™ ◊ê◊ï◊†◊ï', '◊ô◊ë◊†◊î',
      '◊ß◊®◊ô◊™ ◊ë◊ô◊ê◊ú◊ô◊ß', '◊ß◊®◊ô◊™ ◊ô◊ù', '◊ê◊®◊ì', '◊õ◊®◊û◊ô◊ê◊ú', '◊ß◊ì◊ô◊û◊î-◊¶◊ï◊®◊ü', '◊ë◊ô◊™ ◊©◊û◊©',
      '◊†◊©◊®', '◊ê◊ï◊® ◊ô◊î◊ï◊ì◊î', '◊†◊° ◊¶◊ô◊ï◊†◊î', '◊ñ◊õ◊®◊ï◊ü ◊ô◊¢◊ß◊ë', '◊ß◊®◊ô◊™ ◊û◊ú◊ê◊õ◊ô',
      '◊ì◊ô◊û◊ï◊†◊î', '◊û◊í◊ì◊ú ◊î◊¢◊û◊ß', '◊†◊™◊ô◊ë◊ï◊™', '◊ê◊ï◊® ◊¢◊ß◊ô◊ë◊ê', '◊ô◊ß◊†◊¢◊ù ◊¢◊ô◊ú◊ô◊™',
      '◊ß◊ú◊†◊°◊ï◊ï◊î', '◊©◊§◊®◊¢◊ù', '◊î◊ï◊ì ◊î◊©◊®◊ï◊ü', '◊ë◊ô◊™◊® ◊¢◊ô◊ú◊ô◊™', '◊ê◊§◊®◊™◊î'
    ].sort((a, b) => a.localeCompare(b, 'he'));

    console.log(`üîÑ PublicAPI: Using fallback cities list (${fallbackCities.length} cities)`);

    res.json({
      success: true,
      cities: fallbackCities,
      count: fallbackCities.length,
      source: 'fallback',
      cached: false,
      error: error.message
    });
  }
});

/**
 * Generic proxy for data.gov.il resources
 */
router.get('/data-gov-il/:resourceId', async (req, res) => {
  try {
    const { resourceId } = req.params;
    const { limit = 1000 } = req.query;

    console.log(`üèõÔ∏è PublicAPI: Fetching data.gov.il resource: ${resourceId}`);

    const options = {
      hostname: 'data.gov.il',
      path: `/api/action/datastore_search?resource_id=${resourceId}&limit=${limit}`,
      method: 'GET',
      headers: {
        'User-Agent': 'Ludora-API/1.0'
      }
    };

    const data = await new Promise((resolve, reject) => {
      const req = https.request(options, (response) => {
        let data = '';

        response.on('data', (chunk) => {
          data += chunk;
        });

        response.on('end', () => {
          try {
            const jsonData = JSON.parse(data);
            resolve(jsonData);
          } catch (error) {
            reject(new Error('Invalid JSON response'));
          }
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      req.setTimeout(10000, () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });

      req.end();
    });

    if (!data.success || !data.result) {
      throw new Error('Invalid response format from data.gov.il');
    }

    console.log(`‚úÖ PublicAPI: Successfully fetched ${data.result.records?.length || 0} records`);

    res.json({
      success: true,
      data: data.result,
      source: 'data.gov.il'
    });

  } catch (error) {
    console.error(`‚ùå PublicAPI: Error fetching resource ${req.params.resourceId}:`, error);

    res.status(500).json({
      success: false,
      error: error.message,
      resource_id: req.params.resourceId
    });
  }
});

export default router;